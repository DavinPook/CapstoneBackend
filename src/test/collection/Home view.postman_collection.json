{
	"info": {
		"_postman_id": "50c4b40d-8518-4c4a-a82b-5b0afd2eadef",
		"name": "Home view",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46308101",
		"_collection_link": "https://michellewong-8956492.postman.co/workspace/Michelle-Wong's-Workspace~eb3df9cc-fb49-40c3-8181-9b5c55b64548/collection/46308101-50c4b40d-8518-4c4a-a82b-5b0afd2eadef?action=share&source=collection_link&creator=46308101"
	},
	"item": [
		{
			"name": "Home View - Top 5 activities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// --- Utility: Random Date Generator ---",
							"function randomDate(start, end) {",
							"  let date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
							"  let yyyy = date.getFullYear();",
							"  let mm = String(date.getMonth() + 1).padStart(2, '0');",
							"  let dd = String(date.getDate()).padStart(2, '0');",
							"  let hh = String(date.getHours()).padStart(2, '0');",
							"  let min = String(date.getMinutes()).padStart(2, '0');",
							"  let ss = String(date.getSeconds()).padStart(2, '0');",
							"  return `${yyyy}-${mm}-${dd}T${hh}:${min}:${ss}`;",
							"}",
							"",
							"// Range for event dates",
							"let now = new Date();",
							"let future = new Date(Date.now() + 30*24*60*60*1000); // within next 30 days",
							"",
							"// --- Step 1: Create User ---",
							"pm.sendRequest({",
							"    url: \"http://localhost:8080/api/auth\",",
							"    method: \"POST\",",
							"    header: { \"Content-Type\": \"application/json\" },",
							"    body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"            firstName: pm.variables.replaceIn(\"{{$randomFirstName}}\"),",
							"            lastName: pm.variables.replaceIn(\"{{$randomLastName}}\"),",
							"            email: pm.variables.replaceIn(\"{{$randomEmail}}\"),",
							"            password: pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    if (err) { console.error(\"‚ùå Error creating user:\", err); return; }",
							"    let userId = res.json().userId || res.json().id;",
							"    pm.environment.set(\"userId\", userId);",
							"    console.log(\"‚úÖ Created user:\", userId);",
							"",
							"    // --- Helper: Add User to Club ---",
							"    function addUserToClub(clubId, role = \"MEMBER\") {",
							"        pm.sendRequest({",
							"            url: \"http://localhost:8080/api/clubs/user\",",
							"            method: \"POST\",",
							"            header: { \"Content-Type\": \"application/json\" },",
							"            body: {",
							"                mode: \"raw\",",
							"                raw: JSON.stringify({",
							"                    clubId: clubId,",
							"                    username: userId,",
							"                    role: role",
							"                })",
							"            }",
							"        }, function (errU, resU) {",
							"            if (errU) console.error(`‚ùå Error adding user to club ${clubId}:`, errU);",
							"            else console.log(`‚úÖ User ${userId} added to club ${clubId}`);",
							"        });",
							"    }",
							"",
							"    // --- Step 2: Create 3 Clubs ---",
							"    let clubIds = [];",
							"    function createClub(i, callback) {",
							"        pm.sendRequest({",
							"            url: \"http://localhost:8080/api/clubs\",",
							"            method: \"POST\",",
							"            header: { \"Content-Type\": \"application/json\" },",
							"            body: {",
							"                mode: \"raw\",",
							"                raw: JSON.stringify({",
							"                    name: `Club_${i}_${pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")}`,",
							"                    description: `Generated Club ${i}`",
							"                })",
							"            }",
							"        }, function (errC, resC) {",
							"            if (errC) { console.error(`‚ùå Error creating club ${i}:`, errC); return; }",
							"            let clubId = resC.json().clubId || resC.json().id;",
							"            clubIds.push(clubId);",
							"            console.log(`‚úÖ Created club ${i}:`, clubId);",
							"",
							"            // üîë Add user to the club",
							"            addUserToClub(clubId, \"MEMBER\");",
							"",
							"            if (callback) callback();",
							"        });",
							"    }",
							"",
							"    // Chain creation of 3 clubs",
							"    createClub(1, () => createClub(2, () => createClub(3, () => {",
							"        pm.environment.set(\"clubId1\", clubIds[0]);",
							"        pm.environment.set(\"clubId2\", clubIds[1]);",
							"        pm.environment.set(\"clubId3\", clubIds[2]);",
							"",
							"        // --- Step 3: Create Activities ---",
							"        let activities = [",
							"            { type: \"task\", club: clubIds[0] }, // Club1 task",
							"            { type: \"event\", club: clubIds[0] }, // Club1 event",
							"            { type: \"task\", club: clubIds[1] }, // Club2 task",
							"            { type: \"task\", club: clubIds[2] }, // Club3 task",
							"            { type: \"event\", club: clubIds[2], latest: true } // Club3 event (latest startTime)",
							"        ];",
							"",
							"        activities.forEach((act, idx) => {",
							"            let startDate = act.latest ? randomDate(future, new Date(future.getTime() + 7*24*60*60*1000)) ",
							"                                       : randomDate(now, future);",
							"            let endDate = randomDate(new Date(startDate), new Date(future.getTime() + 14*24*60*60*1000));",
							"",
							"            if (act.type === \"event\") {",
							"                pm.sendRequest({",
							"                    url: \"http://localhost:8080/api/events\",",
							"                    method: \"POST\",",
							"                    header: { \"Content-Type\": \"application/json\" },",
							"                    body: {",
							"                        mode: \"raw\",",
							"                        raw: JSON.stringify({",
							"                            title: `Event_${idx+1}`,",
							"                            startTime: startDate,",
							"                            endTime: endDate,",
							"                            location: `Loc_${idx+1}`,",
							"                            description: `Auto-generated event ${idx+1}`,",
							"                            notification: { notifyBeforeMinutes: 30 },",
							"                            clubs: [act.club],",
							"                            userId: userId",
							"                        })",
							"                    }",
							"                }, function (errE, resE) {",
							"                    if (errE) console.error(\"‚ùå Error creating event:\", errE);",
							"                    else console.log(\"‚úÖ Event created:\", resE.json());",
							"                });",
							"            } else {",
							"                pm.sendRequest({",
							"                    url: \"http://localhost:8080/api/tasks\",",
							"                    method: \"POST\",",
							"                    header: { \"Content-Type\": \"application/json\" },",
							"                    body: {",
							"                        mode: \"raw\",",
							"                        raw: JSON.stringify({",
							"                            title: `Task_${idx+1}`,",
							"                            dueDate: startDate,",
							"                            description: `Auto-generated task ${idx+1}`,",
							"                            notification: { notifyBeforeMinutes: 30 },",
							"                            clubs: [act.club],",
							"                            priority: \"HIGH\",",
							"                            userId: userId",
							"                        })",
							"                    }",
							"                }, function (errT, resT) {",
							"                    if (errT) console.error(\"‚ùå Error creating task:\", errT);",
							"                    else console.log(\"‚úÖ Task created:\", resT.json());",
							"                });",
							"            }",
							"        });",
							"    })));",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/homeview/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"homeview",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Home View - Events Stats 60% complete",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// --- Utility: Generate Date Relative to Now ---",
							"function offsetDate(daysOffset) {",
							"  let d = new Date();",
							"  d.setDate(d.getDate() + daysOffset);",
							"  let yyyy = d.getFullYear();",
							"  let mm = String(d.getMonth() + 1).padStart(2, '0');",
							"  let dd = String(d.getDate()).padStart(2, '0');",
							"  let hh = String(d.getHours()).padStart(2, '0');",
							"  let min = String(d.getMinutes()).padStart(2, '0');",
							"  let ss = String(d.getSeconds()).padStart(2, '0');",
							"  return `${yyyy}-${mm}-${dd}T${hh}:${min}:${ss}`;",
							"}",
							"",
							"// --- Step 1: Create User ---",
							"pm.sendRequest({",
							"    url: \"http://localhost:8080/api/auth\",",
							"    method: \"POST\",",
							"    header: { \"Content-Type\": \"application/json\" },",
							"    body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"            firstName: pm.variables.replaceIn(\"{{$randomFirstName}}\"),",
							"            lastName: pm.variables.replaceIn(\"{{$randomLastName}}\"),",
							"            email: pm.variables.replaceIn(\"{{$randomEmail}}\"),",
							"            password: pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    if (err) { console.error(\"‚ùå Error creating user:\", err); return; }",
							"    let userId = res.json().userId || res.json().id;",
							"    pm.environment.set(\"userId\", userId);",
							"    console.log(\"‚úÖ Created user:\", userId);",
							"",
							"    // --- Step 2: Create Club ---",
							"    pm.sendRequest({",
							"        url: \"http://localhost:8080/api/clubs\",",
							"        method: \"POST\",",
							"        header: { \"Content-Type\": \"application/json\" },",
							"        body: {",
							"            mode: \"raw\",",
							"            raw: JSON.stringify({",
							"                name: `Club_${pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")}`,",
							"                description: \"Test club for events\"",
							"            })",
							"        }",
							"    }, function (errC, resC) {",
							"        if (errC) { console.error(\"‚ùå Error creating club:\", errC); return; }",
							"        let clubId = resC.json().clubId || resC.json().id;",
							"        pm.environment.set(\"clubId\", clubId);",
							"        console.log(\"‚úÖ Created club:\", clubId);",
							"",
							"        // --- Step 3: Add User to Club ---",
							"        pm.sendRequest({",
							"            url: \"http://localhost:8080/api/clubs/user\",",
							"            method: \"POST\",",
							"            header: { \"Content-Type\": \"application/json\" },",
							"            body: {",
							"                mode: \"raw\",",
							"                raw: JSON.stringify({",
							"                    clubId: clubId,",
							"                    username: userId,",
							"                    role: \"MEMBER\"",
							"                })",
							"            }",
							"        }, function (errU, resU) {",
							"            if (errU) { console.error(\"‚ùå Error linking user to club:\", errU); return; }",
							"            console.log(\"‚úÖ User linked to club\");",
							"",
							"            // --- Step 4: Create 10 Events (5 past, 5 future) ---",
							"            for (let i = 0; i < 10; i++) {",
							"                // First 5 = past (negative days), last 5 = future (positive days)",
							"                let days = (i < 5) ? -(5 - i) : (i - 4);",
							"                let startDate = offsetDate(days);",
							"                let endDate = offsetDate(days + 1);",
							"",
							"                pm.sendRequest({",
							"                    url: \"http://localhost:8080/api/events\",",
							"                    method: \"POST\",",
							"                    header: { \"Content-Type\": \"application/json\" },",
							"                    body: {",
							"                        mode: \"raw\",",
							"                        raw: JSON.stringify({",
							"                            title: `Event_${i+1}`,",
							"                            startTime: startDate,",
							"                            endTime: endDate,",
							"                            location: `Location_${i+1}`,",
							"                            description: `Auto-generated event ${i+1}`,",
							"                            notification: { notifyBeforeMinutes: 30 },",
							"                            clubs: [clubId],",
							"                            userId: userId",
							"                        })",
							"                    }",
							"                }, function (errE, resE) {",
							"                    if (errE) console.error(\"‚ùå Error creating event:\", errE);",
							"                    else console.log(\"‚úÖ Event created:\", resE.json());",
							"                });",
							"            }",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/homeview/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"homeview",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Home View - Tasks Stats",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// --- Utility: Generate Date Relative to Now ---",
							"function offsetDate(daysOffset) {",
							"  let d = new Date();",
							"  d.setDate(d.getDate() + daysOffset);",
							"  let yyyy = d.getFullYear();",
							"  let mm = String(d.getMonth() + 1).padStart(2, '0');",
							"  let dd = String(d.getDate()).padStart(2, '0');",
							"  let hh = String(d.getHours()).padStart(2, '0');",
							"  let min = String(d.getMinutes()).padStart(2, '0');",
							"  let ss = String(d.getSeconds()).padStart(2, '0');",
							"  return `${yyyy}-${mm}-${dd}T${hh}:${min}:${ss}`;",
							"}",
							"",
							"// --- Step 1: Create User ---",
							"pm.sendRequest({",
							"    url: \"http://localhost:8080/api/auth\",",
							"    method: \"POST\",",
							"    header: { \"Content-Type\": \"application/json\" },",
							"    body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"            firstName: pm.variables.replaceIn(\"{{$randomFirstName}}\"),",
							"            lastName: pm.variables.replaceIn(\"{{$randomLastName}}\"),",
							"            email: pm.variables.replaceIn(\"{{$randomEmail}}\"),",
							"            password: pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    if (err) { console.error(\"‚ùå Error creating user:\", err); return; }",
							"    let userId = res.json().userId || res.json().id;",
							"    pm.environment.set(\"userId\", userId);",
							"    console.log(\"‚úÖ Created user:\", userId);",
							"",
							"    // --- Step 2: Create Club ---",
							"    pm.sendRequest({",
							"        url: \"http://localhost:8080/api/clubs\",",
							"        method: \"POST\",",
							"        header: { \"Content-Type\": \"application/json\" },",
							"        body: {",
							"            mode: \"raw\",",
							"            raw: JSON.stringify({",
							"                name: `Club_${pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")}`,",
							"                description: \"Test club for tasks\"",
							"            })",
							"        }",
							"    }, function (errC, resC) {",
							"        if (errC) { console.error(\"‚ùå Error creating club:\", errC); return; }",
							"        let clubId = resC.json().clubId || resC.json().id;",
							"        pm.environment.set(\"clubId\", clubId);",
							"        console.log(\"‚úÖ Created club:\", clubId);",
							"",
							"        // --- Step 3: Add User to Club ---",
							"        pm.sendRequest({",
							"            url: \"http://localhost:8080/api/clubs/user\",",
							"            method: \"POST\",",
							"            header: { \"Content-Type\": \"application/json\" },",
							"            body: {",
							"                mode: \"raw\",",
							"                raw: JSON.stringify({",
							"                    clubId: clubId,",
							"                    username: userId,",
							"                    role: \"MEMBER\"",
							"                })",
							"            }",
							"        }, function (errU, resU) {",
							"            if (errU) { console.error(\"‚ùå Error linking user to club:\", errU); return; }",
							"            console.log(\"‚úÖ User linked to club\");",
							"",
							"            // --- Step 4: Create 10 Tasks ---",
							"            let tasks = [];",
							"",
							"            // 2 past-due, not completed",
							"            for (let i = 0; i < 2; i++) {",
							"                tasks.push({ dueDate: offsetDate(-7 - i), markComplete: false });",
							"            }",
							"",
							"            // 3 past-due, completed (will update after create)",
							"            for (let i = 0; i < 3; i++) {",
							"                tasks.push({ dueDate: offsetDate(-3 - i), markComplete: true });",
							"            }",
							"",
							"            // 5 upcoming, not completed",
							"            for (let i = 0; i < 5; i++) {",
							"                tasks.push({ dueDate: offsetDate(2 + i), markComplete: false });",
							"            }",
							"",
							"            tasks.forEach((task, idx) => {",
							"                pm.sendRequest({",
							"                    url: \"http://localhost:8080/api/tasks\",",
							"                    method: \"POST\",",
							"                    header: { \"Content-Type\": \"application/json\" },",
							"                    body: {",
							"                        mode: \"raw\",",
							"                        raw: JSON.stringify({",
							"                            title: `Task_${idx+1}`,",
							"                            dueDate: task.dueDate,",
							"                            description: `Generated task ${idx+1}`,",
							"                            notification: { notifyBeforeMinutes: 30 },",
							"                            clubs: [clubId],",
							"                            priority: \"MEDIUM\",",
							"                            userId: userId",
							"                        })",
							"                    }",
							"                }, function (errT, resT) {",
							"                    if (errT) { console.error(\"‚ùå Error creating task:\", errT); return; }",
							"                    let created = resT.json();",
							"                    console.log(`‚úÖ Task_${idx+1} created:`, created);",
							"",
							"                    // --- If this task should be marked complete, update it ---",
							"                    if (task.markComplete) {",
							"                        pm.sendRequest({",
							"                            url: `http://localhost:8080/api/tasks/${created.taskId}`,",
							"                            method: \"PUT\",",
							"                            header: { \"Content-Type\": \"application/json\" },",
							"                            body: {",
							"                                mode: \"raw\",",
							"                                raw: JSON.stringify({",
							"                                    ...created,",
							"                                    completed: true",
							"                                })",
							"                            }",
							"                        }, function (errUp, resUp) {",
							"                            if (errUp) console.error(`‚ùå Error updating Task_${idx+1}:`, errUp);",
							"                            else console.log(`‚úÖ Task_${idx+1} marked complete`);",
							"                        });",
							"                    }",
							"                });",
							"            });",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/homeview/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"homeview",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}