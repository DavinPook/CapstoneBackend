import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.github.dockerjava.api.model.ExposedPort
import com.github.dockerjava.api.model.Ports
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.bmuschko.docker-remote-api' version '9.3.4'

}

group = 'com.fit3161'
version = '0.0.1-SNAPSHOT'



// Standard build task (already exists with Java plugin)
build {
	dependsOn clean
}



java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}
bootJar {
	archiveFileName = 'app.jar'
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('startTestEnv', Exec) {
	description = 'Starts the Docker Compose test environment'
	commandLine 'docker-compose', 'up', '-d'
}

tasks.register('stopTestEnv', Exec) {
	description = 'Stops the Docker Compose test environment'
	commandLine 'docker-compose', 'down'
}


def imageName = 'my-springboot-app'
def containerName = 'springboot_app_container'

// Task to build Docker image
tasks.register('buildDockerImage', DockerBuildImage) {
	dependsOn 'clean', 'build'   // Runs 'clean' and then 'build'
	inputDir = file('.')
	images.add("${imageName}:latest")
}

import com.github.dockerjava.api.model.ExposedPort
import com.github.dockerjava.api.model.Ports

task createAppContainer(type: DockerCreateContainer) {
	dependsOn buildDockerImage
	targetImageId { "${imageName}:latest" }
	containerName = containerName

	exposedPorts = [ExposedPort.tcp(8080)]
	hostConfig.portBindings = [
			new Ports().bind(ExposedPort.tcp(8080), Ports.Binding.bindPort(8080))
	]
}

// Task to start Docker container
tasks.register('startApp', DockerStartContainer) {
	dependsOn createAppContainer
	targetContainerId { createAppContainer.getContainerId() }
}

// Task to stop Docker container
tasks.register('stopApp', DockerStopContainer) {
	targetContainerId { createAppContainer.getContainerId() }
}

// Task to remove Docker container
tasks.register('removeAppContainer', DockerRemoveContainer) {
	dependsOn stopApp
	targetContainerId { createAppContainer.getContainerId() }
}